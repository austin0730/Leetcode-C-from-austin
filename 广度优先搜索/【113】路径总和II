#include <vector>
#include <unordered_map>
#include <queue>
#include <iostream>
using namespace std;
//题目：给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。
vector<vector<int>> pathSum(TreeNode* root, int targetSum) {}

//解法思路：（1）构建函数可以读出从叶节点倒退回根节点的完整路径，用哈希表记录每个节点的父节点；（2）广度优先遍历所有节点，利用队列将节点逐个压入，每弹出一个节点，相应压入该结点的左子节点和右子节点，同时用另一个队列来记录压入节点的路径和，如此实现每一层节点先后进入。
class Solution {
public:
    vector<vector<int>> ret;
    //关键：利用哈希表记录节点的parent
    unordered_map<TreeNode*, TreeNode*> parent;
    //叶节点返回根节点的路径
    void getPath(TreeNode* node) {
        vector<int> tmp;
        while (node != nullptr) {
            tmp.emplace_back(node->val);
            node = parent[node];
        }
        reverse(tmp.begin(), tmp.end());
        ret.emplace_back(tmp);
    }

    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        if (root == nullptr) {
            return ret;
        }
        //两个队列：分别记录节点和对应的路径和。
        queue<TreeNode*> que_node;
        queue<int> que_sum;
        que_node.emplace(root);
        que_sum.emplace(0);

        while (!que_node.empty()) {
            TreeNode* node = que_node.front();
            que_node.pop();
            //后入的节点由于为弹出节点的子节点，因此路径和公式如下。
            int rec = que_sum.front() + node->val;
            que_sum.pop();
            //叶节点判断
            if (node->left == nullptr && node->right == nullptr) {
                if (rec == targetSum) {
                    getPath(node);
                }
            }
            else {
                if (node->left != nullptr) {
                    parent[node->left] = node;
                    que_node.emplace(node->left);
                    que_sum.emplace(rec);
                }
                if (node->right != nullptr) {
                    parent[node->right] = node;
                    que_node.emplace(node->right);
                    que_sum.emplace(rec);
                }
            }
        }

        return ret;
    }
};

//作者：LeetCode-Solution
