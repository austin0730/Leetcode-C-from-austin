//题目：给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。算法的时间复杂度应该为 O(log (m+n)) 。

//解法思路：
（1）奇数数组中位数为中间值，偶数数组中位数为计算所得，因此需要分别找到中位数左值和右值；
（2）从（m+n）/2开始，两个数组进行同样幅度的二分，即nums1和nums2第一步都是找第（m+n）/4个数，将两数（设为a和b）进行比较，此时有(m+n)/4个数小于a，（m+n）/4个数小于b，
若a<b,则中位数必然介于a和b之间，此时nums1中小于a的数都可以直接抛弃，然后对nums1剩余元素和nums2进行寻找中位数，注意此时(m+n)/4个数已经被抛弃，则中位数为剩余合并数组的
第(m+n)/4个数，由此对(m+n)继续进行二分。上述步骤概括为，确定每次寻找第i个元素——比较两数组的第i元素——抛弃较小值的0-i个元素，重复流程，i=i/2.
（3）除了思路独特以外（对两个数组分别进行同等幅度的索值），本题难点还在于边界条件（中位数的位置公式）。


class Solution {
public:
//抄作业版本
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m=nums1.size();
        int n=nums2.size();
        //如果是奇数，中位数位置（从1开始）为n/2+1=(n+1)/2=(n+2)/2;如果是偶数，左中位数为n/2=(n+1)/2,右中位数为n/2+1=(n+2)/2.
        //因此可以概括为左中位数=(n+1)/2,右中位数=(n+2)/2,奇数数组左右中位数一致。
        int left=(m+n+1)/2;
        int right=(m+n+2)/2;
        return (findKth(nums1,0,nums2,0,left)+findKth(nums1,0,nums2,0,right))/2.0;
    };
    //数组1从int i位置开始找值，寻找第k/2个数
    int findKth(vector<int>& nums1, int i, vector<int>& nums2, int j, int k){
    //终止条件1：如果起始位置超出数组，则直接返回另一个数组的数即可。
        if (i>=nums1.size()) return nums2[j+k-1];
        if (j>=nums2.size()) return nums1[i+k-1];
    //终止条件2：k为1，即找两数组中最小的数。
        if (k==1) return min(nums1[i], nums2[j]);
        //如果数组要找的数超出位置，则另一个数组前k/2个数必然非中位数（抛弃）
        int value1= (i+k/2-1)<nums1.size()? nums1[i+k/2-1]: INT_MAX;
        int value2= (j+k/2-1)<nums2.size()? nums2[j+k/2-1]: INT_MAX;
        if (value1< value2)
        return findKth(nums1, i+k/2, nums2, j, k-k/2);
        else
        {
            return findKth(nums1, i, nums2, j+k/2, k-k/2);
        }
    }
};


//（官方解法二）时间复杂度降低至log(min(m,n))
//解法思路：在较短数组中寻找分界点i，（对应长数组中分界点(m+n）/2-i),使得两个数组中左分组的最大值小于右分组的最小值，从而得到中位数。
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    //保证第一个数组为较短数组。
        if (nums1.size() > nums2.size()) {
            return findMedianSortedArrays(nums2, nums1);
        }
        
        int m = nums1.size();
        int n = nums2.size();
        int left = 0, right = m;
        // median1：前一部分的最大值
        // median2：后一部分的最小值
        int median1 = 0, median2 = 0;

        while (left <= right) {
            // 前一部分包含 nums1[0 .. i-1] 和 nums2[0 .. j-1]
            // 后一部分包含 nums1[i .. m-1] 和 nums2[j .. n-1]
            int i = (left + right) / 2;
            int j = (m + n + 1) / 2 - i;

            // nums_im1, nums_i, nums_jm1, nums_j 分别表示 nums1[i-1], nums1[i], nums2[j-1], nums2[j]
            int nums_im1 = (i == 0 ? INT_MIN : nums1[i - 1]);
            int nums_i = (i == m ? INT_MAX : nums1[i]);
            int nums_jm1 = (j == 0 ? INT_MIN : nums2[j - 1]);
            int nums_j = (j == n ? INT_MAX : nums2[j]);

            if (nums_im1 <= nums_j) {
                median1 = max(nums_im1, nums_jm1);
                median2 = min(nums_i, nums_j);
                //若小于，表明nums1[i-1]至少小于(m+n)/2个数，为中位数下界。
                left = i + 1;
            } else {
                //若大于，则为上界
                right = i - 1;
            }
        }

        return (m + n) % 2 == 0 ? (median1 + median2) / 2.0 : median1;
    }
};
